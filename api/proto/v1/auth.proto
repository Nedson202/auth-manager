syntax = "proto3";
package v1;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/nedson202/auth-manager/api/proto/v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Auth Manager";
		version: "1.0";
		contact: {
			name: "auth-manager project";
			url: "https://github.com/nedson202/auth-manager";
			email: "samson.negedu.a@gmail.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

message AuthRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string = {min_len: 1}];
}

message AuthResponse {
    string id = 1;
    string token = 2;
}

message User {
    string id = 1;
    string username = 2;
    string email = 3;
    string password = 4;
}

message TokenRefreshRequest {}

// Service to authentication
service AuthService {
    // Login
    rpc Login(AuthRequest) returns (AuthResponse){
        option (google.api.http) = {
            post: "/api/v1/login"
            body: "*"
        };
    }

    // Signup
    rpc Signup(AuthRequest) returns (AuthResponse){
        option (google.api.http) = {
            post: "/api/v1/signup"
            body: "*"
        };
    }

    // Refresh token
    rpc RefreshToken(TokenRefreshRequest) returns (AuthResponse){
        option (google.api.http) = {
            post: "/api/v1/token/refresh"
            body: "*"
        };
    }
}
